```python
# -*- coding: utf-8 -*-
"""my_problemset_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l0FcfmGXH2NaulkWbWnj1GkdESr7-P9Z
"""

# Load RGB image from URL

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import convolve2d
from skimage import io, color
from PIL import Image
from io import BytesIO
import requests

def plot(x):
    fig, ax = plt.subplots()
    im = ax.imshow(x, cmap='gray')
    ax.axis('off')
    fig.set_size_inches(5, 5)
    plt.show()

image_url = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ8PY4t0YOxzSkpR0hUPzbMm54udoSNGA0tvA&usqp=CAU"
response = requests.get(image_url)
image = Image.open(BytesIO(response.content))

## Plot the loaded image

plt.figure(figsize=(6, 6))
plt.imshow(image)
plt.title("Loaded Image")
plt.show()

plot(np.random.random((11, 11, 3)))

## Show the shape of the resulting image array

image_array = np.array(image)
print("Image size: height x width x channels", image_array.shape)

# Resize image

print("Image size: height x width x channels", image_array.shape)

new_size = (224, 224)
resized_image = image.resize(new_size)

plot(resized_image)

# Grayscale image

## Convert the resized image to grayscale

grayscale_image = resized_image.convert('L')

## Plot the resulting grayscale image

plt.imshow(grayscale_image, cmap='gray')
plt.axis('off')  # Remove axes
plt.show()

## Show the shape of the new image

print("Shape of the grayscale image:", np.array(grayscale_image).shape)

# Convolve with 10 random filters and show filters and features maps for each

image = io.imread("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ8PY4t0YOxzSkpR0hUPzbMm54udoSNGA0tvA&usqp=CAU")
image = image[:, :, 0]
image = image.astype(float)
image /= 255.0
plot(image)

a = np.matrix([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])

a

a.shape

f = a

x = image

f

f[2, 2]

x2 = np.zeros(x.shape)

for i in range(1, x.shape[0] - 1):
    for j in range(1, x.shape[1] - 1):

        x2[i, j] = f[0, 0] * x[i - 1, j - 1]  \
        +         f[0, 1] * x[i - 1, j]      \
        +         f[0, 2] * x[i - 1, j + 1]  \
        +         f[1, 0] * x[i, j - 1]      \
        +         f[1, 1] * x[i, j]          \
        +         f[1, 2] * x[i, j + 1]      \
        +         f[2, 0] * x[i + 1, j - 1]  \
        +         f[2, 1] * x[i + 1, j]      \
        +         f[2, 2] * x[i + 1, j + 1]

plot(x)

plot(x2)

def conv2(x, f):
    x2 = np.zeros(x.shape)
    for i in range(1, x.shape[0] - 1):
        for j in range(1, x.shape[1] - 1):

            x2[i, j] = f[0, 0] * x[i - 1, j - 1] \
            +         f[0, 1] * x[i - 1, j]     \
            +         f[0, 2] * x[i - 1, j + 1] \
            +         f[1, 0] * x[i, j - 1]     \
            +         f[1, 1] * x[i, j]         \
            +         f[1, 2] * x[i, j + 1]     \
            +         f[2, 0] * x[i + 1, j - 1] \
            +         f[2, 1] * x[i + 1, j]     \
            +         f[2, 2] * x[i + 1, j + 1]

    return x2

for i in range(9):
    a = 2 * np.random.random((3, 3)) - 1
    print(a)
    z = conv2(x, a)
    plot(z)

x3 = x[::2, ::2]

x3.shape

plot(x3)

# different sized pixels of the same image resolution

for i in range(6):
    x3 = x3[::2, ::2]
    plot(x3)

# image = resize(image, ((image.shape[0]/3), (image.shape[1]/3)))

def resize(image): (150, 300)

image = resize(image)

# Load the image from the provided URL
image_url = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ8PY4t0YOxzSkpR0hUPzbMm54udoSNGA0tvA&usqp=CAU"
image = io.imread(image_url)

# Convert the image to grayscale
image_gray = color.rgb2gray(image)

# Define the size of the filters (n x n)
n = 5

# Number of filters to generate
num_filters = 10

# Create an array to store the randomly generated filters
filters = np.random.random((num_filters, n, n))

# Plot the original image
plt.figure(figsize=(8, 8))
plt.subplot(num_filters + 1, 1, 1)
plt.imshow(image_gray, cmap="gray")
plt.title("Original Image (Grayscale)")
# Loop through the filters, convolve the image, and plot the results
for i in range(num_filters):
    # Convolve the image with the current filter
    feature_map = convolve2d(image_gray, filters[i], mode="same", boundary="wrap")

    # Plot the feature map
    plt.subplot(num_filters + 1, 2, (i + 2) * 2 - 1)
    plt.imshow(feature_map, cmap="gray")
    plt.title(f"Feature Map {i + 1}")

    # Plot the filter (or feature)
    plt.subplot(num_filters + 1, 2, (i + 2) * 2)
    plt.imshow(filters[i], cmap="gray")
    plt.title(f"Filter {i + 1}")

plt.tight_layout()
plt.show()
